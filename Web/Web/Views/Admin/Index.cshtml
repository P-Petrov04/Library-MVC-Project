@model Web.ViewModels.Users.UserVM
@inject Common.Repositories.BaseRepository<User> UsersRepo
@inject Common.Repositories.BaseRepository<Role> RolesRepo
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Admin Dashboard";
}

@section Styles {
    <link rel="stylesheet" href="~/css/user/admin.css" asp-append-version="true" />
}

<div class="admin-dashboard">
    <!-- Sidebar -->
    <div class="sidebar">
        <h3>Admin Dashboard</h3>
        <ul class="menu">
            <li>
                <a href="/Admin/RegisterUser" class="menu-link dynamic-link">Register User/Moderator</a>
            </li>
            <li>
                <a href="/Tag/Index" class="menu-link dynamic-link">Manage Tags</a>
            </li>
            <li>
                <a href="/Category/Index" class="menu-link dynamic-link">Manage Categories</a>
            </li>
            <li>
                <a href="/Publisher/Index" class="menu-link dynamic-link">Manage Publishers</a>
            </li>
            <li>
                <a href="/Author/Index" class="menu-link dynamic-link">Manage Authors</a>
            </li>
            <li>
                <a href="/Book/Index" class="menu-link dynamic-link">Manage Books</a>
            </li>
            <li>
                <a href="/Loan/Index" class="menu-link dynamic-link">Manage Loans</a>
            </li>
            <li>
                <a href="/Auth/UserList" class="menu-link dynamic-link">Manage Users</a>
            </li>
        </ul>
    </div>

    <!-- Content Area -->
    <div class="content-area">
        <div id="content-placeholder">
            <h2>Dashboard</h2>
            <p>Select a menu item to manage content.</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const links = document.querySelectorAll(".dynamic-link");
            const placeholder = document.getElementById("content-placeholder");

            links.forEach(link => {
                link.addEventListener("click", function (e) {
                    e.preventDefault(); // Prevent page reload

                    // Show loading indicator
                    placeholder.innerHTML = '<p>Loading...</p>';

                    // Fetch content dynamically
                    const url = this.getAttribute("href");
                    fetch(url)
                        .then(response => {
                            if (!response.ok) throw new Error("Network response was not ok");
                            return response.text();
                        })
                        .then(html => {
                            placeholder.innerHTML = html; // Inject content
                        })
                        .catch(error => {
                            console.error("Error loading content:", error);
                            placeholder.innerHTML = '<p class="text-danger">Error loading content.</p>';
                        });
                });
            });
        });
    </script>
}
